一：模块：为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。
    在Python中，一个.py文件就称之为一个模块（Module）。
    写程序都是为实现某些功能，有些常用的功能是Python或其他人写好了的，我们可以直接调用。
    招聘条件：你有写过一个模块，被多少多少人用过。


二：使用模块有什么好处？
    最大的好处是大大提高了代码的可维护性。其次，编写代码不必从零开始。
    当一个模块编写完毕，就可以被其他地方引用。
    我们在编写程序的时候，也经常引用其他模块，包括Python内置的模块和来自第三方的模块。
    使用模块还可以避免函数名和变量名冲突。
    相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。

三：你也许还想到，如果不同的人编写的模块名相同怎么办？
    为了避免模块名冲突，Python又引入了按目录来组织模块的方法，称为包（Package）。
    请注意，每一个包目录下面都会有一个__init__.py的文件，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包。
    __init__.py可以是空文件，也可以有Python代码，因为__init__.py本身就是一个模块，而它的模块名就是对应的包名。
    注意：自己创建的模块名不要和Python的模块名相同。


四：如何在Python文件中引入及模块：
    import 模块名。


五：if __name__=='__main__':
    test()
    说明：当我们在命令行运行hello模块文件时，Python解释器把一个特殊变量__name__置为__main__，而如果在其他地方导入该hello模块时，if判断将失败，因此，这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。


六：模块中变量的作用域：
    在Python中，是通过_前缀来实现变量的访问控制。
    ①：正常函数和变量名都是公开的(public)
    ②：__xxx__这样的变量时特殊变量，可以被直接使用，但是有特殊用途。如模块定义的文档注释也可以用特殊变量__doc__访问
    ③：类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，__abc等；
        private函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为Python并没有一种方法可以完全限制访问private函数或变量，但是，从编程习惯上不应该引用private函数或变量。




