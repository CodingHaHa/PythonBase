效率问题？串行一定比并发慢吗？
    在很多线程时，切换线程的消耗也是很大的，就会导致串行执行更快。（time.sleep(1):此时cpu 不工作。）
    IO密集型函数：有阻塞状态，不会一直使用CPU。
    CPU密集型函数：CPU使用多。
       Python3.5优化的比较好，但是Python2.7里面就比较慢了。


GIL：全局解释器所：

注意：Python：GIL：全局解释锁。使用一个CPU。
    由于GIL：可以对IO密集进行优化。但是对于CPU密集的没有办法优化。
    解释器上的BUG，只有Cpython有这个问题，它是最通用的python解释器。
    GIL对我们产生的影响：在同一时刻，只能有一个线程进入解释器。
    为何要有GIL？
        历史问题：最开始为了避免数据安全统一的麻烦，统一加了GIL。以后语言发展都建立在这个基础上，导致现在很难去除它。



如何解决？从而利用多核。
    ①：使用多进程？多个计算任务，分别放到一个进程里面，从而使用多核。【不完美，线程何进程是不一样的，线程之间可以共享数据，而进程之间是相互独立的，要实现进程间通信需要使用其他的消耗】
    ②：协程：不抢占。【线程时抢占式的】
      协程+多进程：【其实也是处理IO密集型的】，比多进行实现好。

      计算密集型： 我们可以对多进程一块使用C写

结论：在Python里面，
    如果任务是IO密集型的，可以使用多线程【可以还是用threading】
    如果是CPU【计算】密集型的，sorry，改C。





