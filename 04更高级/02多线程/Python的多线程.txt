一：进程和线程：
    代码最终都是有cpu执行的，cpu最后都是通过系统进行调度的。
    每一个.py文件，运行时就是一个单独的进程。
    线程：是操作系统能够进行运算调度的最小单位。他包含在进程之中。

二：并发和并行：
    并行：真正的是同一时刻多个线程同时执行。
    并发：一个时刻只有一个线程在运行。


三：多线程多进程：
    多进程：Unix/Linux操作系统提供了一个fork()系统调用，它非常特殊。普通的函数调用，调用一次，返回一次，但是fork()调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。
        子进程永远返回0，而父进程返回子进程的ID。这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用getppid()就可以拿到父进程的ID。
        Python的os模块封装了常见的系统调用，其中就包括fork，可以在Python程序中轻松创建子进程：
        import os
        print('Process (%s) start...' % os.getpid())
        # Only works on Unix/Linux/Mac:
        pid = os.fork()
        if pid == 0:
            print('I am child process (%s) and my parent is %s.' % (os.getpid(), os.getppid()))
        else:
            print('I (%s) just created a child process (%s).' % (os.getpid(), pid))


        由于Windows没有fork调用，上面的代码在Windows上无法运行。
        由于Windows没有fork调用，难道在Windows上无法用Python编写多进程的程序？
        由于Python是跨平台的，自然也应该提供一个跨平台的多进程支持。multiprocessing模块就是跨平台版本的多进程模块
        multiprocessing模块提供了一个Process类来代表一个进程对象
            from multiprocessing import Process
            import os

            # 子进程要执行的代码
            def run_proc(name):
                print('Run child process %s (%s)...' % (name, os.getpid()))

            if __name__=='__main__':
                print('Parent process %s.' % os.getpid())
                p = Process(target=run_proc, args=('test',))
                print('Child process will start.')
                p.start()
                p.join()
                print('Child process end.'


            创建子进程时，只需要传入一个执行函数和函数的参数，创建一个Process实例，用start()方法启动，这样创建进程比fork()还要简单。
            join()方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步。
            Pool： 如果要启动大量的子进程，可以用进程池的方式批量创建子进程：




    多线程：
        Python的标准库提供了两个模块：_thread和threading，_thread是低级模块，threading是高级模块，对_thread进行了封装。绝大多数情况下，我们只需要使用threading这个高级模块。
        启动一个线程就是把一个函数传入并创建Thread实例，然后调用start()开始执行：

        Lock
            :多线程和多进程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响，而多线程中，所有变量都由所有线程共享，所以，任何一个变量都可以被任何一个线程修改，因此，线程之间共享数据最大的危险在于多个线程同时改一个变量，把内容给改乱了。
            如果我们要确保balance计算正确，就要给change_it()上一把锁，当某个线程开始执行change_it()时，我们说，该线程因为获得了锁，因此其他线程不能同时执行change_it()，只能等待，直到锁被释放后，获得该锁以后才能改。由于锁只有一个，无论多少线程，同一时刻最多只有一个线程持有该锁，所以，不会造成修改的冲突。创建一个锁就是通过threading.Lock()来实现：


注意：一个线程就是一个指令集和。
    切换：

threading.join()方法:上一级线程等待其他线程执行完毕后，才会继续往后执行。

线程和进程的快慢：这个是一个陷进题。
    线程和进程是相互关联的，不能将其进行分开。




线程何进程区别：
    同一个进程中的线程间可以共享数据，而进程间不能直接进行数据共享。
    创建线程代价比创建进程小得多。
    主线程可以影响子线程，而主进程不能影响子进程。













17361064617


