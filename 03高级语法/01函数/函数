一：函数：将一组语句的集合通过一个名字（函数名）封装起来，要执行这个函数，只需要掉用函数名就可以了
  减少重复代码
  方便代码维护，易扩展
  保持代码一致性

二：函数格式：
    def 函数名(参数列表)：
        函数体

三：函数命名规则和变量的命名规则一样。
    调用函数:（）

四：函数的参数：
    ①：必须参数：必须以正确的顺序传入。调用时的数量必须和声明时一样。
        (name,age)
    ②：关键字参数：
    ③：默认参数：定义函数时，指定一个参数的默认值
    ④：不定长参数：
            A:(*args):#如果参数是没有名字的；把参数放到一个元组中
                for i in args:
                   sum+=i
            B:(**args):#如果参数是有名字的k-v;把参数放到一个dict中


五：函数的返回值：
    注意：
    使用：return 来给函数的调用者返回数据。
     如果没有在函数体的最后写return语句，系统会默认给我们添加return None
     如果return多个对象，解释器会把这多个对象组成一个元组作为一个整体返回。
     return的作用：
        ①：返回一个结果给调用者
        ②：结束函数的执行。

六：函数的作用域：
    # LEGB:
        #L:local,局部作用域，即函数中定义的变量
        #E:enclosing,嵌套的父级函数的局部作用域，即包含此函数的上级函数的局部作用域，但不是全局的。
        #G:globa,全局变量，就是模块级别定义的变量
        #B:built-in,系统固定模块里面的变量，比如，int
        #搜索变量的优先级顺序依次是：局部作用域>外层作用域>当前模块的全局>python内置作用域


七：函数参数：
    如果想给函数直接传入一个字典


八：作用域产生
在Python中，只有模
    块（module），
    类（class）以及
    函数（def、lambda）才会引入新的作用域，其它的代码块（如if、try、for等）是不会引入新的作用域的，如下代码：

if 2>1:
    x = 1
print(x)  # 1
这个是没有问题的，if并没有引入一个新的作用域，x仍处在当前作用域中，后面代码可以使用。

def test():
    x = 2
print(x) # NameError: name 'x2' is not defined
def、class、lambda是可以引入新作用域的。

5.3 变量的修改
x=6
def f2():
    print(x)
    x=5
f2()

错误原因说明：
# 错误的原因在于print(x)时,解释器会在局部作用域找,会找到x=5(函数已经加载到内存),但x使用在声明前了,所以报错:
# local variable 'x' referenced before assignment.如何证明找到了x=5呢?简单:注释掉x=5,x=6
# 报错为:name 'x' is not defined
#同理
x=6
def f2():
    x+=1 #local variable 'x' referenced before assignment.
f2()
5.4 global关键字
当内部作用域想修改外部作用域的变量时，就要用到global和nonlocal关键字了，当修改的变量是在全局作用域（global作用域）上的，就要使用global先声明一下
count = 10
def outer():
    global count
    print(count)
    count = 100
    print(count)
outer()

5.5 nonlocal关键字

global关键字声明的变量必须在全局作用域上，不能嵌套作用域上，当要修改嵌套作用域（enclosing作用域，外层非全局作用域）中的变量怎么办呢，这时就需要nonlocal关键字了
def outer():
    count = 10
    def inner():
        nonlocal count
        count = 20
        print(count)
    inner()
    print(count)
outer()
#20
#20　